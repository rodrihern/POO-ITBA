@startuml


class Board {
    -Piece[][] board
    -Square whiteKing, blackKing
    -boolean cwcs, cwcl, cbcs, cbcl
    -ArrayList<Move> allMoves
    -ArrayList<Piece[][]> prevPositions
    -HashSet<Move> legalMoves
    +String toString()
    +Piece getPiece(Square sq)
    +Piece getPiece(int i, int j)
    +Collection<Move> getAllMoves()
    +Collection<Move> getLegalMoves()
    +void makeMove(Move newMove)
    +boolean hasLegalMoves()
    +boolean isInCheck(Color.color)
    +void castle(Color.color, Side side)
    +void promote(Move move)
    -boolean isUnderAttack(Square sq)
    -boolean isLegal(Square from, Square to)
    -pieceInDir(Square sq, Direction dir)
    -Piece[][] getBoardCopy()

}

class Piece {
    -PieceType type
    -Color color
    +Piece(Color color, PieceType type)
    +PieceType getType()
    +Color getColor()
    +boolean equals(Object o)
    +String toString()
    +boolean canMove(Square from, Square to, Piece[][] board)
    +Collection<Square> getPossibleDest(Square from, Board board)
}

class Move {
    -Piece piece
    -Square from
    -Square to
    +Move(String move, Color color)
    +Move(Piece piece, Square dest)
    +Piece getPiece()
    +Square getFrom()
    +Square getTo()
    +boolean isPromotion()
}

class Square {
    -int row
    -int col
    +Square(int row, int col)
    +Square(String sq)
    +int getRow()
    +int getCol()
}

enum Color {
    +BLACK
    +WHITE
}

enum Direction {
    +UP, DOWN, LEFT, RIGHT,
    UPRIGHT, UPLEFT,DOWNRIGHT, DOWNLEFT,
    KNIGHT_UL, KNIGHT_UR, KNIGHT_DL, KNIGHT_DR,
    KNIGHT_LU, KNIGHT_LD, KNIGHT_RU, KNIGHT_RD
    +int getRowInc()
    +int getColInc()
}

enum PieceType {
    +KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN
    +String toString()
    +boolean canMove(Square from, Square to, Color color, Piece[][] board)
    +Collection<Square> getPossibleDest(Square from, Piece[][] board, Color color)
}

Board *- Move
Board *-- Square
Move *- Square
Piece *- Move
Board *-- Piece
Piece *-- PieceType
PieceType *- Direction
Color -* Piece

@enduml