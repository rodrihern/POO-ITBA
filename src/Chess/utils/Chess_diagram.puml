@startuml


class Board {
    -Piece[][] board, prev
    -Square whiteKing, blackKing
    -boolean cwcs, cwcl, cbcs, cbcl
    -ArrayList allMoves
    +String toString()
    +Piece[][] getBoardCopy()
    +ArrayList<Move> getAllMoves();
    +void makeMove(Move newMove)
    +void undo()
    +boolean hasLegalMoves(Color.color)
    +boolean isInCheck(Color.color)
    +void castle(Color.color, Side side)
    +void promote(Move move)
    +SequencedSet getAllMoves()
    -isUnderAttack(Square sq)
    -canMakeMove(Square from, Square to)
    -pieceInDir(Square sq, Direction dir)

}

class Piece {
    -PieceType type
    -Color color
    +Piece(Color color, PieceType type)
    +PieceType getType()
    +Color getColor()
    +boolean equals(Object o)
    +String toString()
    +Direction canMoveTo(Square dest, Piece[][] board)
}

class Move {
    -Piece piece
    -Square from
    -Square to
    +Move(String move, Color color)
    +Move(Piece piece, Square dest)
    +Piece getPiece()
    +Square getFrom()
    +Square getTo()
    +boolean isPromotion()
}

class Square {
    -int row
    -int col
    +Square(int row, int col)
    +Square(String sq)
    +int getRow()
    +int getCol()
}

enum Color {
    +BLACK
    +WHITE
}

enum Direction {
    +UP, DOWN, LEFT, RIGHT, UPRIGHT, UPLEFT,
    DOWNRIGHT, DOWNLEFT
    +int rowInc()
    +int colInc()
}

enum PieceType {
    +KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN
    +String toString()
    +canMove(Square from, Square to, Color color, Piece[][] board)
}

Board *- Move
Board *-- Square
Move *- Square
Piece *- Move
Board *-- Piece
Piece *-- PieceType
PieceType *- Direction
Color -* Piece

@enduml